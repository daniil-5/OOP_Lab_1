using SQLite;
namespace OOP_Lab_1.Core.Entities;

public class Account
    {
        private static int _accountCounter = 0;
        public string AccountNumber { get; private set; }
        public decimal Balance { get; private set; }
        public double InterestRate { get; private set; }
        public bool IsBlocked { get; private set; }
        public bool IsFrozen { get; private set; }
        public Client Owner { get; private set; }

        public Account(Client owner, decimal initialBalance, double interestRate)
        {
            AccountNumber = "ACC" + (_accountCounter++).ToString();
            Balance = initialBalance;
            InterestRate = interestRate;
            Owner = owner;
        }

        public void Deposit(decimal amount)
        {
            if (IsBlocked || IsFrozen)
            {
                Console.WriteLine($"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –°—á–µ—Ç {AccountNumber} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω.");
                return;
            }

            Balance += amount;
            Console.WriteLine($"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {Balance}");
        }

        public void Withdraw(decimal amount)
        {
            if (IsBlocked || IsFrozen)
            {
                Console.WriteLine($"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –°—á–µ—Ç {AccountNumber} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω.");
                return;
            }

            if (Balance >= amount)
            {
                Balance -= amount;
                Console.WriteLine($"‚úÖ –°–Ω—è—Ç–∏–µ: {amount}. –û—Å—Ç–∞—Ç–æ–∫: {Balance}");
            }
            else
            {
                Console.WriteLine("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.");
            }
        }

        public void Transfer(Account target, decimal amount)
        {
            if (IsBlocked || IsFrozen || target.IsBlocked || target.IsFrozen)
            {
                Console.WriteLine($"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –û–¥–∏–Ω –∏–∑ —Å—á–µ—Ç–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω.");
                return;
            }

            if (Balance >= amount)
            {
                Balance -= amount;
                target.Deposit(amount);
                Console.WriteLine($"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ {amount} —Å–æ —Å—á–µ—Ç–∞ {AccountNumber} –Ω–∞ {target.AccountNumber}. –ë–∞–ª–∞–Ω—Å: {Balance}");
            }
            else
            {
                Console.WriteLine("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.");
            }
        }

        public void AccumulateInterest()
        {
            if (IsBlocked || IsFrozen)
            {
                Console.WriteLine($"‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –°—á–µ—Ç {AccountNumber} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω.");
                return;
            }

            decimal interest = Balance * (decimal)(InterestRate / 100);
            Balance += interest;
            Console.WriteLine($"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã: {interest}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {Balance}");
        }

        public void Block()
        {
            IsBlocked = true;
            Console.WriteLine($"‚ùå –°—á–µ—Ç {AccountNumber} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
        }

        public void Unblock()
        {
            IsBlocked = false;
            Console.WriteLine($"‚úÖ –°—á–µ—Ç {AccountNumber} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
        }

        public void Freeze()
        {
            IsFrozen = true;
            Console.WriteLine($"‚ùÑÔ∏è –°—á–µ—Ç {AccountNumber} –∑–∞–º–æ—Ä–æ–∂–µ–Ω.");
        }

        public void Unfreeze()
        {
            IsFrozen = false;
            Console.WriteLine($"üî• –°—á–µ—Ç {AccountNumber} —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω.");
        }
    }